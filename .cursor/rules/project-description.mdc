---
alwaysApply: true
---

# Evaluaci√≥n T√©cnica de Frontend ‚Äì Listado de Propiedades ¬°Bienvenido/a! Esta prueba est√° dise√±ada para evaluar tus habilidades en React, Tailwind CSS v4 y buenas pr√°cticas de frontend. Desarrollar√°s un sistema de listado de propiedades con filtros, b√∫squeda y visualizaci√≥n de detalles. --- ## üìù Tarea **Construir un "Listado de Propiedades":** * Crear un listado de propiedades con capacidades de b√∫squeda y ordenaci√≥n. * Construir todos los componentes de UI (tarjetas, botones, modales, filtros, etc.) usando React y Tailwind v4. * Crear un dise√±o responsive que funcione en dispositivos m√≥viles y escritorio. * Implementar un modal emergente con detalles de la propiedad al hacer clic en un listado. * Usar datos ficticios (proporcionados en un archivo JSON). * Implementar estados de carga y error adecuados, como el de la b√∫squeda. --- ## üìÅ Estructura de Proyecto Recomendada Empieza con un proyecto React + Tailwind v4 desde cero. Recomendamos usar Vite:
bash
npm create vite@latest property-list -- --template react
cd property-list
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
Luego organiza tu c√≥digo de forma escalable, por ejemplo:
/src
  /components
    /ui            # Componentes de UI reutilizables (Button, Card, Modal, etc.)
    /layout        # Componentes de layout (Header, Sidebar, etc.)
    /features      # Componentes de funcionalidades (PropertyList, FilterPanel, etc.)
  /hooks           # Custom hooks
  /utils           # Funciones auxiliares
  /data            # Datos ficticios
  /context         # React context si es necesario
--- ## üé® Ejemplo en Figma [Figma ‚Äì Ejemplo de Listado de Propiedades](https://www.figma.com/file/j1USLQWQQXmMsKvTN3HSI2/CRM-Property-Dashboard-Example) *√ösalo como referencia visual para el dise√±o del listado, filtros y el modal de detalles.* --- ## ‚úÖ Requisitos * Usar React (v18+) con componentes funcionales y hooks. * Usar Tailwind CSS v4 para estilos (no frameworks CSS adicionales). * Incluir los siguientes componentes: * Listado de propiedades con imagen, precio, caracter√≠sticas y estado. * Barra de b√∫squeda y opciones de ordenaci√≥n (por precio, fecha, etc.). * Panel lateral (sidebar) para filtros. * Modal con detalles completos de la propiedad al hacer clic en una tarjeta. * Estados de carga durante b√∫squedas y manejo de errores. * Implementar dise√±o responsive. * Estructurar el c√≥digo de manera limpia y mantenible. * Manejar correctamente los estados de la aplicaci√≥n. --- ## üöÄ Primeros Pasos 1. **Crear un nuevo proyecto React con Vite:**
bash
   npm create vite@latest property-list -- --template react
   cd property-list
   npm install
2. **Configurar Tailwind CSS:**
bash
   npm install -D tailwindcss postcss autoprefixer
   npx tailwindcss init -p
3. **Instalar dependencias adicionales si necesitas:**
bash
   npm install react-router-dom # si necesitas routing
4. **Usar datos ficticios (ejemplo):**
js
   // src/data/properties.json
   
--- ## üßë‚Äçüíª Entrega * Crear un repositorio en GitHub con tu soluci√≥n. * Incluir un README con: * Instrucciones para instalar y ejecutar el proyecto. * Explicaci√≥n de la estructura del proyecto y decisiones t√©cnicas. * Funcionalidades implementadas y c√≥mo se usan. * Desaf√≠os encontrados y c√≥mo los resolviste. * Mejoras que har√≠as con m√°s tiempo disponible. * El plazo para completar esta prueba es de 1-2 d√≠as. * Asegurar que el repositorio sea p√∫blico o compartir acceso con el equipo de contrataci√≥n. --- ## üîç Criterios de Evaluaci√≥n * **Calidad del c√≥digo:** limpio, mantenible y bien estructurado. * **Dise√±o de componentes:** reutilizables, composables y con props claras. * **Funcionalidad:** implementaci√≥n correcta de b√∫squeda, filtros y modal de detalles. * **Responsive:** adaptaci√≥n adecuada a diferentes tama√±os de pantalla. * **Manejo de estados:** carga, errores, filtros y selecci√≥n de propiedades. * **Uso de Tailwind:** utilizaci√≥n efectiva de utilidades y personalizaci√≥n. * **Buenas pr√°cticas:** estructura de proyecto, organizaci√≥n de componentes y optimizaci√≥n. ---
